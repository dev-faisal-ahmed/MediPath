/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as PrivateImport } from './routes/_private'
import { Route as PrivateIndexImport } from './routes/_private/index'
import { Route as PrivateServicesRouteImport } from './routes/_private/services/route'
import { Route as PrivateAddBillRouteImport } from './routes/_private/add-bill/route'
import { Route as PrivateReferrerDoctorsRouteImport } from './routes/_private/referrer.doctors/route'
import { Route as PrivateReferrerAgentsRouteImport } from './routes/_private/referrer.agents/route'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const PrivateIndexRoute = PrivateIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/index.lazy').then((d) => d.Route),
)

const PrivateServicesRouteRoute = PrivateServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/services/route.lazy').then((d) => d.Route),
)

const PrivateAddBillRouteRoute = PrivateAddBillRouteImport.update({
  id: '/add-bill',
  path: '/add-bill',
  getParentRoute: () => PrivateRoute,
} as any).lazy(() =>
  import('./routes/_private/add-bill/route.lazy').then((d) => d.Route),
)

const PrivateReferrerDoctorsRouteRoute =
  PrivateReferrerDoctorsRouteImport.update({
    id: '/referrer/doctors',
    path: '/referrer/doctors',
    getParentRoute: () => PrivateRoute,
  } as any).lazy(() =>
    import('./routes/_private/referrer.doctors/route.lazy').then(
      (d) => d.Route,
    ),
  )

const PrivateReferrerAgentsRouteRoute = PrivateReferrerAgentsRouteImport.update(
  {
    id: '/referrer/agents',
    path: '/referrer/agents',
    getParentRoute: () => PrivateRoute,
  } as any,
).lazy(() =>
  import('./routes/_private/referrer.agents/route.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_private/add-bill': {
      id: '/_private/add-bill'
      path: '/add-bill'
      fullPath: '/add-bill'
      preLoaderRoute: typeof PrivateAddBillRouteImport
      parentRoute: typeof PrivateImport
    }
    '/_private/services': {
      id: '/_private/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof PrivateServicesRouteImport
      parentRoute: typeof PrivateImport
    }
    '/_private/': {
      id: '/_private/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateIndexImport
      parentRoute: typeof PrivateImport
    }
    '/_private/referrer/agents': {
      id: '/_private/referrer/agents'
      path: '/referrer/agents'
      fullPath: '/referrer/agents'
      preLoaderRoute: typeof PrivateReferrerAgentsRouteImport
      parentRoute: typeof PrivateImport
    }
    '/_private/referrer/doctors': {
      id: '/_private/referrer/doctors'
      path: '/referrer/doctors'
      fullPath: '/referrer/doctors'
      preLoaderRoute: typeof PrivateReferrerDoctorsRouteImport
      parentRoute: typeof PrivateImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteChildren {
  PrivateAddBillRouteRoute: typeof PrivateAddBillRouteRoute
  PrivateServicesRouteRoute: typeof PrivateServicesRouteRoute
  PrivateIndexRoute: typeof PrivateIndexRoute
  PrivateReferrerAgentsRouteRoute: typeof PrivateReferrerAgentsRouteRoute
  PrivateReferrerDoctorsRouteRoute: typeof PrivateReferrerDoctorsRouteRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateAddBillRouteRoute: PrivateAddBillRouteRoute,
  PrivateServicesRouteRoute: PrivateServicesRouteRoute,
  PrivateIndexRoute: PrivateIndexRoute,
  PrivateReferrerAgentsRouteRoute: PrivateReferrerAgentsRouteRoute,
  PrivateReferrerDoctorsRouteRoute: PrivateReferrerDoctorsRouteRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PrivateRouteWithChildren
  '/login': typeof LoginRoute
  '/add-bill': typeof PrivateAddBillRouteRoute
  '/services': typeof PrivateServicesRouteRoute
  '/': typeof PrivateIndexRoute
  '/referrer/agents': typeof PrivateReferrerAgentsRouteRoute
  '/referrer/doctors': typeof PrivateReferrerDoctorsRouteRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/add-bill': typeof PrivateAddBillRouteRoute
  '/services': typeof PrivateServicesRouteRoute
  '/': typeof PrivateIndexRoute
  '/referrer/agents': typeof PrivateReferrerAgentsRouteRoute
  '/referrer/doctors': typeof PrivateReferrerDoctorsRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_private': typeof PrivateRouteWithChildren
  '/login': typeof LoginRoute
  '/_private/add-bill': typeof PrivateAddBillRouteRoute
  '/_private/services': typeof PrivateServicesRouteRoute
  '/_private/': typeof PrivateIndexRoute
  '/_private/referrer/agents': typeof PrivateReferrerAgentsRouteRoute
  '/_private/referrer/doctors': typeof PrivateReferrerDoctorsRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/add-bill'
    | '/services'
    | '/'
    | '/referrer/agents'
    | '/referrer/doctors'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/add-bill'
    | '/services'
    | '/'
    | '/referrer/agents'
    | '/referrer/doctors'
  id:
    | '__root__'
    | '/_private'
    | '/login'
    | '/_private/add-bill'
    | '/_private/services'
    | '/_private/'
    | '/_private/referrer/agents'
    | '/_private/referrer/doctors'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_private",
        "/login"
      ]
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/add-bill",
        "/_private/services",
        "/_private/",
        "/_private/referrer/agents",
        "/_private/referrer/doctors"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_private/add-bill": {
      "filePath": "_private/add-bill/route.tsx",
      "parent": "/_private"
    },
    "/_private/services": {
      "filePath": "_private/services/route.tsx",
      "parent": "/_private"
    },
    "/_private/": {
      "filePath": "_private/index.tsx",
      "parent": "/_private"
    },
    "/_private/referrer/agents": {
      "filePath": "_private/referrer.agents/route.tsx",
      "parent": "/_private"
    },
    "/_private/referrer/doctors": {
      "filePath": "_private/referrer.doctors/route.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
